package mashin.oep.model;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

public class PropertyElementCollection {

  List<PropertyElement> list;
  PropertyElement template;
  PropertyElement empty;
  
  public PropertyElementCollection(PropertyElement template) {
    list = new ArrayList<PropertyElement>();
    this.template = template;
    empty = createEmpty();
    list.add(empty);
  }
  
  public boolean hasProperty(String propertyName) {
    for(PropertyElement propertyElement: list) {
      if(propertyElement.hasPropertyId(propertyName)) {
        return true;
      }
    }
    return false;
  }
  
  public void setPropertyValue(String propertyName, Object propertyValue) {
    
    for(PropertyElement propertyElement: list) {
      if(propertyElement.hasPropertyId(propertyName)) {
        propertyElement.setPropertyValue(propertyName, propertyValue);
        if(propertyElement.isEmpty())
          list.remove(propertyElement);
      }
    }
    
    if(!empty.isEmpty()) {
      empty = createEmpty();
      list.add(empty);
    }
    
  }
  
  public Object getPropertyValue(String propertyName) {
    for(PropertyElement propertyElement: list) {
      if(propertyElement.hasPropertyId(propertyName)) {
        return propertyElement.getPropertyValue(propertyName);
      }
    }
    return null;
  }
  
  public IPropertyDescriptor[] getPropertyDescriptors() {
    
    List<IPropertyDescriptor[]> propertyDescriptorsList = new ArrayList<IPropertyDescriptor[]>(list.size());
    int totalNumberOfDescriptors = 0;
    
    for(PropertyElement propertyElement: list) {
      IPropertyDescriptor[] descriptors = propertyElement.getPropertyDescriptors();
      totalNumberOfDescriptors += descriptors.length;
      propertyDescriptorsList.add(descriptors);
    }
    
    IPropertyDescriptor[] descriptors = new IPropertyDescriptor[totalNumberOfDescriptors];
    int i = 0;
    
    for(IPropertyDescriptor[] ds: propertyDescriptorsList) {
      for(int j = 0; j < ds.length; j++)
        descriptors[i++] = ds[j];
    }
    
    return descriptors;
    
  }
  
  private PropertyElement createEmpty() {
    try {
      return template.getClass().newInstance();
    } catch (InstantiationException | IllegalAccessException e) {
      e.printStackTrace();
      return null;
    }
  }

}
